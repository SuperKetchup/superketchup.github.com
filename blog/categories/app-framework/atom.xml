<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: app_framework | Ben zhao's Blog]]></title>
  <link href="http://SuperKetchup.github.io/blog/categories/app-framework/atom.xml" rel="self"/>
  <link href="http://SuperKetchup.github.io/"/>
  <updated>2014-05-29T09:12:55+08:00</updated>
  <id>http://SuperKetchup.github.io/</id>
  <author>
    <name><![CDATA[Ben zhao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android REST]]></title>
    <link href="http://SuperKetchup.github.io/blog/2014/05/28/my-app-design/"/>
    <updated>2014-05-28T17:20:12+08:00</updated>
    <id>http://SuperKetchup.github.io/blog/2014/05/28/my-app-design</id>
    <content type="html"><![CDATA[<h2>关于开发框架</h2>

<p>总听到码农说的都是不要重复造轮子，然后巴拉巴拉一堆。</br></p>

<p>我个人还是不推崇一开始就是使用框架，这类东西其实是在你实际编码中不断摸索，提炼出来的<code>精华</code>和<code>模块</code>,也是工作总结。</br></p>

<p>再谈谈现有的开源项目</p>

<ul>
<li><a href="https://github.com/yangfuhai/afinal">Afinal</a></li>
<li><a href="https://github.com/wyouflf/xUtils">xUtils</a></li>
<li><a href="https://github.com/white-cat/ThinkAndroid">ThinkAndroid</a></li>
</ul>


<p>这三个都是国内经验丰富的作者贡献出来的有兴趣可以看看。
但是里面的错误还是比较多的。</p>

<h2>关于<code>我的</code>框架</h2>

<p>Google 在 2013的IO大会上提出了一套REST CLIENT 架构</p>

<p><img src="http://SuperKetchup.github.io/images/android_rest.png"></p>

<p>看到ContentProvider就不喜欢，平常的开发中一般很少用，一般直接<code>Dao+Model+Manager</code>或者<code>Domain+Dao</code> 的方式直接于数据库交互， A而且没有跨进程的需求，基本不使用ContentProvider。但ContentProvider为数据库的管理提供了更清晰的接口，应该也是有好处的。</p>

<p>我目前的开发用的组装框架:</p>

<ul>
<li>Volly</li>
<li>Butterknife</li>
<li>OrmLite</li>
</ul>


<h3>Volly</h3>

<p>2013的IO上由Google官方推出的解决 NetWork的开源库
并且在Google Store等App上已经使用上了，比较成熟稳定的一个开源库
一个<code>ImageLoader</code>异步图片请求的升级版，加上一个可控的网络请求队列
<code>RequestQueue</code>，可以在整个App中只维持一个请求队列单例，而且可以中断请求！而且是Google官方推出的，一般要缓存图片到SD卡的话还要用到disklrucache这个库</p>

<h3>Butterknife</h3>

<p>这是一个<code>ViewInject</code> 减少使用findViewById这样的语句，并且高效的是不是使用反射的技术，之持Adapter,Fragment中使用。这是国内那些框架所不能及的。是在编译时生成中间class文件。但是有点不人性话的地方是都要一个默认的(Id)，<code>AndroidAnotation</code>这个注入库可以很好的解决这个问题。</p>

<h3>OrmLite</h3>

<p>这个就不多说了,操作数据库用的，基于反射和注解的方式来简化sql语句</p>

<h2>开源库</h2>

<p>接触开源也有比较旧了，项目中也引用了一些比较成熟的开源库。如果有能力。我也希望我也有一个成熟稳定的分享给大家~</p>
]]></content>
  </entry>
  
</feed>
